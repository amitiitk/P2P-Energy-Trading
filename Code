// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

contract EnergyTradingWithDSO {
    struct Stakeholder {
        uint role;
        bool isRegistered;
    }

    struct Transaction {
        address seller;
        address buyer;
        uint amount;
        uint initialPrice;
        uint negotiatedPrice;
        bool priceConfirmed;
        uint createTime;     // Timestamp when the transaction was created
        uint confirmTime;    // Timestamp when the transaction was confirmed by the buyer
        uint settleTime;     // Timestamp when the transaction was settled by the DSO
        uint energySent;     // Energy sent by the prosumer
        uint energyReceived; // Energy actually received by the consumer
        uint lossPercent;    // Percentage of energy lost during transmission
    }

    struct EnergyOffer {
        address prosumer;
        uint amount;
        uint price;
        bool isActive;
    }

    mapping(address => Stakeholder) public stakeholders;
    mapping(uint => Transaction) public transactions;
    mapping(uint => EnergyOffer) public offers;
    uint public transactionCount;
    uint public offerCount;
    address public dso;

    event TransactionUpdated(uint transactionId, string updateType);

    modifier onlyDSO() {
        require(msg.sender == dso, "Only DSO can perform this action");
        _;
    }

    constructor() public  {
        dso = msg.sender; // The deployer is the DSO
    }

    function registerStakeholder(address addr, uint role) public onlyDSO {
        require(!stakeholders[addr].isRegistered, "Already registered");
        stakeholders[addr] = Stakeholder(role, true);
    }

    function createOffer(uint amount, uint price) public {
        require(stakeholders[msg.sender].role == 1 && stakeholders[msg.sender].isRegistered, "Unauthorized or not registered");
        offers[offerCount++] = EnergyOffer(msg.sender, amount, price, true);
    }

    function acceptOffer(uint offerId) public {
        require(stakeholders[msg.sender].role == 2 && stakeholders[msg.sender].isRegistered, "Unauthorized or not registered");
        require(offers[offerId].isActive, "Offer not active");
        transactions[transactionCount++] = Transaction(offers[offerId].prosumer, msg.sender, offers[offerId].amount, offers[offerId].price, offers[offerId].price, false, block.timestamp, 0, 0, offers[offerId].amount, 0, 0);
        offers[offerId].isActive = false;
        emit TransactionUpdated(transactionCount - 1, "Created");
    }

    function proposePrice(uint transactionId, uint price) public {
        Transaction storage txn = transactions[transactionId];
        require((msg.sender == txn.seller || msg.sender == txn.buyer) && !txn.priceConfirmed, "Unauthorized or price already confirmed");
        txn.negotiatedPrice = price;
        emit TransactionUpdated(transactionId, "Price Proposed");
    }

    function confirmPrice(uint transactionId) public {
        Transaction storage txn = transactions[transactionId];
        require((msg.sender == txn.seller || msg.sender == txn.buyer) && txn.negotiatedPrice != 0, "Unauthorized or no price proposed");
        txn.priceConfirmed = true;
        emit TransactionUpdated(transactionId, "Price Confirmed");
    }

    function confirmDelivery(uint transactionId, uint energyReceived) public {
        Transaction storage txn = transactions[transactionId];
        require(msg.sender == txn.buyer && txn.priceConfirmed, "Unauthorized or price not confirmed");
        txn.energyReceived = energyReceived;
        txn.lossPercent = calculateLoss(txn.energySent, energyReceived);
        txn.confirmTime = block.timestamp;
        emit TransactionUpdated(transactionId, "Delivery Confirmed");
    }

    function calculateLoss(uint energySent, uint energyReceived) private pure returns (uint) {
        if (energyReceived >= energySent) return 0;
        return 100 - (energyReceived * 100 / energySent);
    }

    function settleTransaction(uint transactionId) public onlyDSO {
        Transaction storage txn = transactions[transactionId];
        require(txn.confirmTime != 0, "Delivery not confirmed");
        txn.settleTime = block.timestamp;
        if (txn.lossPercent > 0) {
            txn.negotiatedPrice -= txn.negotiatedPrice * txn.lossPercent / 100;
        }
        emit TransactionUpdated(transactionId, "Transaction Settled");
    }
}
