// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract EnergyTradingSystem {
    enum State { Register, Injected, Board, Match, Purchased }

    struct EnergyOwnership {
        address account;
        uint256 amount;
        State state;
        uint256 timestamp;
    }

    address public dso;
    uint256 public immutable energyLossThreshold;
    mapping(address => EnergyOwnership) public ownerships;
    mapping(address => uint256) public balances;

    event OwnershipEvent(address indexed account, uint256 amount, State state, uint256 timestamp);
    event EnergyInjected(address indexed account, uint256 amount, uint256 timestamp);
    event EnergyMatched(address indexed account, uint256 amount, State state, uint256 timestamp);
    event EnergyTraded(address indexed account, uint256 amount, State state, uint256 timestamp);
    event MitigationActionsTaken(uint256 lossPercentage);
    event NoMitigationNeeded(uint256 lossPercentage);

    constructor(uint256 _threshold) {
        require(_threshold > 0, "Threshold must be greater than zero");
        energyLossThreshold = _threshold;
    }

    function registerNode(address account, bool isDSO, bool isProsumer) public {
        require(account != address(0), "Invalid address");

        if (isDSO) {
            dso = account;
        } else {
            ownerships[account] = EnergyOwnership({
                account: account,
                amount: 0,
                state: State.Register,
                timestamp: block.timestamp
            });
            emit OwnershipEvent(account, 0, State.Register, block.timestamp);
        }
    }

    function injectEnergy(address prosumer, uint256 energyAmount) public {
        require(prosumer != address(0), "Invalid address");
        require(msg.sender == prosumer, "Only the prosumer can inject energy");

        EnergyOwnership storage ownership = ownerships[prosumer];
        ownership.amount += energyAmount;
        ownership.state = State.Injected;
        ownership.timestamp = block.timestamp;

        emit EnergyInjected(prosumer, energyAmount, block.timestamp);
    }

    function matchEnergy(address[] memory prosumers, address[] memory consumers) public {
        for (uint256 i = 0; i < prosumers.length; i++) {
            EnergyOwnership storage ownership = ownerships[prosumers[i]];
            if (ownership.state == State.Injected && ownership.amount > 0) {
                ownership.state = State.Board;
                emit EnergyMatched(prosumers[i], ownership.amount, State.Board, block.timestamp);
                require(ownership.state != State.Register, "Invalid state transition"); // Additional check
            }
        }

        for (uint256 j = 0; j < consumers.length; j++) {
            EnergyOwnership storage ownership = ownerships[consumers[j]];
            ownership.state = State.Match;
            emit EnergyMatched(consumers[j], ownership.amount, State.Match, block.timestamp);
            require(ownership.state != State.Register, "Invalid state transition"); // Additional check
        }
    }

    function tradeEnergy(address[] memory prosumers, address[] memory consumers, uint256 price) public {
        for (uint256 i = 0; i < prosumers.length; i++) {
            EnergyOwnership storage ownership = ownerships[prosumers[i]];
            uint256 energySold = ownership.amount;
            balances[prosumers[i]] += energySold * price;
            ownership.state = State.Purchased;
            ownership.amount = 0; // Reset the energy amount after trading
            emit EnergyTraded(prosumers[i], energySold, State.Purchased, block.timestamp);
        }

        for (uint256 j = 0; j < consumers.length; j++) {
            EnergyOwnership storage ownership = ownerships[consumers[j]];
            ownership.state = State.Purchased;
            emit EnergyTraded(consumers[j], ownership.amount, State.Purchased, block.timestamp);
        }
    }

    function verify(address account, string memory action) public view {
        require(account != address(0), "Invalid address");

        if (keccak256(abi.encodePacked(action)) == keccak256("Trade")) {
            require(ownerships[account].state == State.Purchased, "Trade not verified");
            require(ownerships[account].state != State.Register && ownerships[account].state != State.Board, "Invalid state transition"); // Additional check
        } else if (keccak256(abi.encodePacked(action)) == keccak256("Injection")) {
            require(ownerships[account].state == State.Injected, "Injection not verified");
            require(ownerships[account].state != State.Register && ownerships[account].state != State.Board, "Invalid state transition"); // Additional check
        } else {
            revert("Invalid action");
        }
    }

    function calculateAndMitigateEnergyLoss(uint256 sourceEnergy, uint256 destinationEnergy) public returns (uint256) {
        uint256 energyLoss = sourceEnergy - destinationEnergy;
        uint256 energyLossPercentage = (energyLoss * 100) / sourceEnergy;

        if (energyLossPercentage > energyLossThreshold) {
            emit MitigationActionsTaken(energyLossPercentage);
        } else {
            emit NoMitigationNeeded(energyLossPercentage);
        }

        return energyLossPercentage;
    }
}
